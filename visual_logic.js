/**
 * Generated by Verge3D Puzzles v.3.7.1
 * Wed Nov 10 2021 22:08:27 GMT+0530 (India Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.animMixerCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
        document.getElementById('loaddesc').innerHTML = 'Hyundai 360 Experience is ' + Math.round(_initGlob.percentage) + "% Loaded";
        document.getElementById('my3dBar').style.width = Math.round(_initGlob.percentage) + '%';
      
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
        document.getElementById('loaddesc').innerHTML = 'Hyundai 360 Experience is ' + Math.round(_initGlob.percentage) + "% Loaded";

        document.getElementById('progress_bar').style.display = "none";
        after_calls1();

      
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var hydralics,Spot_Light,Carpaint_Mat,exterior,Carpaint_In,Head_lights,check_annot, camera_moving, Carpaint_Base, Head_lights_back, tailgate, orvm_light_on, sunroof,sunroof1, mirror_r, Carpaint_Roof, fl_door, fr_door, br_door, Carpaint_Highlights, bl_door, wiper_a, wiper_b, windows, back_wiper, wheels;


function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}



// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
 function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var hasSkinning = firstSubmesh.isSkinnedMesh;
            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasSkinning || hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasSkinning) {
                    newMat.skinning = true;
                }

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();


// tweenCamera puzzle
function tweenCamera(posObjName, targetObjName, duration, doSlot) {

    duration = Math.max(0, duration);

    if (!targetObjName)
        return;
    if (posObjName)
        var posObj = getObjectByName(posObjName);
    else
        var posObj = appInstance.camera;
    var targetObj = getObjectByName(targetObjName);
    if (!posObj || !targetObj)
        return;

    var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween)
            appInstance.controls.tween(wPos, wTarget, duration, doSlot);
    } else { // TODO: static camera, just position it for now
        if (appInstance.camera.parent)
            appInstance.camera.parent.worldToLocal(wPos);
        appInstance.camera.position.copy(wPos);
        appInstance.camera.lookAt(wTarget);
        doSlot();
    }
}


// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}


// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}


// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// setObjTransform puzzle
function setObjTransform(objNames, mode, x, y, z, offset) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}


/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                var wMat = appInstance.worldMaterial;
                if (wMat)
                    for (var texName in wMat.nodeTextures)
                        if (wMat.nodeTextures[texName] == elem)
                            appInstance.updateEnvironment(wMat);

            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}




// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.camera == camera)
        return;
    appInstance.setCamera(camera);
}


// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objNames, contents, id) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();


// whenHovered puzzle
function registerOnHover(objNames, xRay, cbOver, cbOut) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

Carpaint_Mat = 'BaseColour';
if (Carpaint_Mat == 'BaseColour') {
  setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color', 0, 0.004, 0.191, '');
  setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.663, 0.706, 0.996, '');
  setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
  setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
  setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
  Carpaint_Mat = 'Fiery Red Diesel';
}
Carpaint_Mat = 'UpperColour';
if (Carpaint_Mat == 'UpperColour') {
  setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color', 0.006, 0.006, 0.007, '');
  setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color', 0.384, 0.384, 0.412, '');
  setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);
  setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 1);
  setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);
  Carpaint_Mat = 'Fiery Red Diesel Black';
}
Carpaint_Mat = 'LineColour';
if (Carpaint_Mat == 'LineColour') {
  setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.89, 0.004, 0, '');
  setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.996, 0.365, 0.365, '');
  setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.36);
  setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.7);
  setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  Carpaint_Mat = 'Red Line';
}


setCSSRuleStyle('width', '15px', '.v3d-annotation', true,'');
setCSSRuleStyle('height', '15px', '.v3d-annotation', true,'');
setCSSRuleStyle('height', '15px', '.v3d-annotation', true,'');
setCSSRuleStyle('backgroundColor', '#00aad2', '.v3d-annotation', true,'');
setCSSRuleStyle('minWidth', '0px', '.v3d-annotation', true,'');
setCSSRuleStyle('padding', '0px', '.v3d-annotation', true,'');
setCSSRuleStyle('fontSize', '0px', '.v3d-annotation', true,'');
setCSSRuleStyle('minWidth', '0px', '.v3d-annotation-dialog', true,'');
setCSSRuleStyle('opacity', '0', '.v3d-annotation-transparent', true,'');
setCSSRuleStyle('backgroundColor', 'gray', '.v3d-annotation-transparent', true,'');

registerSetTimer('autorotate', 3, function() {
  autoRotateCamera(true, 1);
}, Infinity);
registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  autoRotateCamera(false, 0.5);
  registerSetTimer('autorotate', 5, function() {
    autoRotateCamera(true, 1);
  }, Infinity);
  document.getElementById('morq').style.display = "none";
  document.getElementById('foot3').style.display = "inline-block";
  document.getElementById('foot3_1').style.display = "none";
  document.getElementById('foot1_1').style.display = "none";
  document.getElementById('foot1').style.display = "inline-block";
  document.getElementById('foot2_1').style.display = "none";
  document.getElementById('foot2').style.display = "inline-block";
  document.getElementById('foot4_1').style.display = "none";
  document.getElementById('foot4').style.display = "inline-block";
  document.getElementById('foot5_1').style.display = "none";
  document.getElementById('foot5').style.display = "inline-block";
}, function() {});


Head_lights = 'off';
Head_lights_back = 'off';
orvm_light_on = 'off';
Spot_Light = 'off';
eventHTMLElem('click', 'annotation_knife_button', false, function(event) {
    document.getElementById('annotation_knife_button').style.border= '3px solid #00aad2';

    if (Head_lights == 'off') {
    assignMat('Head_Lights_A', 'White_On');
    assignMat('Head_Lights_B_Bulb', 'White_On');
    assignMat('Head_Lights_B_01', 'White_On');
    assignMat('Head_Lights_B_02', 'White_On');
    assignMat('Head_Lights_B_03', 'White_On');
    assignMat('Head_Lights_Blinker', 'Orange_On');
    assignMat('Head_Lights_Blinker_Bulb', 'Orange_On');
    assignMat('Head_Lights_DRL', 'White_On');
    assignMat('Head_Lights_Fog', 'Fog_On');

    Head_lights = 'on';
  } else if (Head_lights == 'on') {
    document.getElementById('annotation_knife_button').style.border= 'none';

    assignMat('Head_Lights_A', 'Dark_Glass_Light');
    assignMat('Head_Lights_B_Bulb', 'HeadLight_Bulb');
    assignMat('Head_Lights_B_01', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_02', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_03', 'Ex_LightsChrome');
    assignMat('Head_Lights_Blinker', 'HeadLight_Reflector');
    assignMat('Head_Lights_Blinker_Bulb', 'Orange_Bulb');
    assignMat('Head_Lights_DRL', 'HeadLight_DRL');
    assignMat('Head_Lights_Fog', 'Dark_Glass_Light');

    Head_lights = 'off';
  }
  if (Head_lights_back == 'off') {
    assignMat('Tail_Lights_A_01', 'White_On');
    assignMat('Tail_Lights_A_02', 'White_On');
    assignMat('Tail_Lights_A_02_Bulb', 'White_On');
    assignMat('Tail_Lights_B_01', 'Orange_On');
    assignMat('Tail_Lights_B_02', 'Orange_On');
    assignMat('Tail_Lights_B_02_Bulb', 'Orange_On');
    assignMat('Tail_Lights_C_01', 'Red_On');
    assignMat('Tail_Lights_C_02', 'Red_On');
    assignMat('Tail_Lights_C_02_Bulb', 'Red_On');
    assignMat('Tail_Lights_D', 'Red_On');

    Head_lights_back = 'on';
  } else if (Head_lights_back == 'on') {
    assignMat('Tail_Lights_A_01', 'HeadLight_Reflector');
    assignMat('Tail_Lights_A_02', 'Ex_LightsChrome');
    assignMat('Tail_Lights_A_02_Bulb', 'HeadLight_Bulb');
    assignMat('Tail_Lights_B_01', 'HeadLight_Reflector');
    assignMat('Tail_Lights_B_02', 'Ex_LightsChrome');
    assignMat('Tail_Lights_B_02_Bulb', 'Orange_Bulb');
    assignMat('Tail_Lights_C_01', 'Ex_LightsChrome');
    assignMat('Tail_Lights_C_02', 'Ex_LightsChrome');
    assignMat('Tail_Lights_C_02_Bulb', 'HeadLight_Bulb');
    assignMat('Tail_Lights_D', 'Red_Off');

    Head_lights_back = 'off';
  }
  if (orvm_light_on == 'off') {
    assignMat('ORVM_Lt', 'Orange_On');
    assignMat('ORVM_Lt_Blinker', 'Orange_On');
    assignMat('ORVM_Rt', 'Orange_On');
    assignMat('ORVM_Rt_Blinker', 'Orange_On');
    orvm_light_on = 'on';
  } else if (orvm_light_on == 'on') {
    assignMat('ORVM_Lt', 'Ex_LightsChrome');
    assignMat('ORVM_Lt_Blinker', 'Orange_Bulb');
    assignMat('ORVM_Rt', 'Ex_LightsChrome');
    assignMat('ORVM_Rt_Blinker', 'Orange_Bulb');
    orvm_light_on = 'off';
  }

  if (Spot_Light == 'off') {
    assignMat('Stop_Signal_Centre_01', 'Red_On');
    assignMat('Stop_Signal_Centre_02', 'Red_On');
    assignMat('Stop_Signal_Centre_Bulb', 'Red_On');
    Spot_Light = 'on';
  } else if (Spot_Light == 'on') {
    assignMat('Stop_Signal_Centre_01', 'Ex_LightsChrome');
    assignMat('Stop_Signal_Centre_02', 'Ex_LightsChrome');
    assignMat('Stop_Signal_Centre_Bulb', 'HeadLight_Bulb');
    Spot_Light = 'off';
  }


});


operateAnimation('STOP', 'Taigate_Open', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    tailgate = 'closed';

operateAnimation('STOP', 'Front_Lt_Door', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    fl_door = 'closed';

operateAnimation('STOP', 'Front_Rt_Door', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    bl_door = 'closed';

operateAnimation('STOP', 'Back_Lt_Door', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    br_door = 'closed';

operateAnimation('STOP', 'Back_Rt_Door', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    fr_door = 'closed';


    
eventHTMLElem('click', 'unfold_knife_button', false, function(event) {

    if (fr_door == 'closed') {
      document.getElementById('unfold_knife_button').style.border= '3px solid #00aad2';
  
      operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
              function() {
        fr_door = 'open';
      }, undefined, false);
  
          } else if (fr_door == 'open') {
              document.getElementById('unfold_knife_button').style.border= 'none';
  
      operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 0.5,
              function() {
        fr_door = 'closed';
      }, undefined, true);
  
          }
    if (br_door == 'closed') {
  
      operateAnimation('PLAY', 'Back_Rt_Door', null, null, 'LoopOnce', 1,
              function() {
        br_door = 'open';
      }, undefined, false);
  
          } else if (br_door == 'open') {
  
      operateAnimation('PLAY', 'Back_Rt_Door', null, null, 'LoopOnce', 0.5,
              function() {
        br_door = 'closed';
      }, undefined, true);
  
          }
    if (fl_door == 'closed') {
  
      operateAnimation('PLAY', 'Front_Lt_Door', null, null, 'LoopOnce', 1,
              function() {
        fl_door = 'open';
      }, undefined, false);
  
          } else if (fl_door == 'open') {
  
      operateAnimation('PLAY', 'Front_Lt_Door', null, null, 'LoopOnce', 0.5,
              function() {
        fl_door = 'closed';
      }, undefined, true);
  
          }
    if (bl_door == 'closed') {
  
      operateAnimation('PLAY', 'Back_Lt_Door', null, null, 'LoopOnce', 1,
              function() {
        bl_door = 'open';
      }, undefined, false);
  
          } else if (bl_door == 'open') {
  
      operateAnimation('PLAY', 'Back_Lt_Door', null, null, 'LoopOnce', 0.5,
              function() {
        bl_door = 'closed';
      }, undefined, true);
  
          }
          if (tailgate == 'closed') {

            operateAnimation('PLAY', 'Taigate_Open', null, null, 'LoopOnce', 1,
                    function() {
                                                tailgate = 'open';
        
            }, undefined, false);
        
            operateAnimation('PLAY', 'Tailgate_Hydraulics_Lft', null, null, 'LoopOnce', 1,
                            function() {
        
                    }, undefined, false);
                    operateAnimation('PLAY', 'Tailgate_Hydraulics_Rt', null, null, 'LoopOnce', 1,
                    function() {
                    }, undefined, false);
        
                } else if (tailgate == 'open') {
        
            operateAnimation('PLAY', 'Taigate_Open', null, null, 'LoopOnce', 1,
                    function() {
                        tailgate = 'closed';
        
            }, undefined, true);
            operateAnimation('PLAY', 'Tailgate_Hydraulics_Rt', null, null, 'LoopOnce', 1,
                            function() {
                    }, undefined, true);
                    operateAnimation('PLAY', 'Tailgate_Hydraulics_Lft', null, null, 'LoopOnce', 1,
                    function() {
                    }, undefined, true);
        
                }
  });


  operateAnimation('STOP', 'Ft_Lt_Wheel', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ft_Rt_Wheel', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_Rt_Mirror', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_Lt_Mirror', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_Door_front_L_window', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_door_front_R_window', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_Door_rear_L_window', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Ani_Door_rear_R_window', null, null, 'AUTO', 1,
  function() {}, undefined, false);
 
  operateAnimation('STOP', 'Tailgate_Hydraulics_Lft', null, null, 'AUTO', 1,
  function() {}, undefined, false);
  
  operateAnimation('STOP', 'Tailgate_Hydraulics_Rt', null, null, 'AUTO', 1,
  function() {}, undefined, false);


  hydralics = 'closed';


  
  
  
  eventHTMLElem('click', 'src3', false, function(event) {
      document.getElementById('audi').style.color = "#080f17";
      document.getElementById('src4').style.display = "inline-block";
      document.getElementById('src3').style.display = "none";
      document.getElementById('disclaimer').style.color = "white";
  
      
      replaceTexture('Verge3D_Environment', 'environment_texture', './Night_Env.hdr', function() {});
      assignMat('Environment_Object', 'BG_Environment_Night');
      assignMat('Light Poles', 'Night BG');
      assignMat('Head_Lights_A', 'White_On');
      assignMat('Head_Lights_B_Bulb', 'White_On');
      assignMat('Head_Lights_B_01', 'White_On');
      assignMat('Head_Lights_B_02', 'White_On');
      assignMat('Head_Lights_B_03', 'White_On');
      assignMat('Head_Lights_Blinker', 'Orange_On');
      assignMat('Head_Lights_Blinker_Bulb', 'Orange_On');
      assignMat('Head_Lights_DRL', 'White_On');
      assignMat('Head_Lights_Fog', 'Fog_On');
    });
  
  eventHTMLElem('click', 'ab_3', false, function(event) {
      document.getElementById('audi').style.color = "#080f17";
      document.getElementById('ab_4').style.display = "inline-block";
      document.getElementById('ab_3').style.display = "none";
  
      document.getElementById('az').style.color = "white";
      document.getElementById('ay').style.color = "white";
      document.getElementById('disclaimer').style.color = "white";
  
    replaceTexture('Verge3D_Environment', 'environment_texture', './Night_Env.hdr', function() {});
    assignMat('Environment_Object', 'BG_Environment_Night');
    assignMat('Light Poles', 'Night BG');
    assignMat('Head_Lights_A', 'White_On');
    assignMat('Head_Lights_B_Bulb', 'White_On');
    assignMat('Head_Lights_B_01', 'White_On');
    assignMat('Head_Lights_B_02', 'White_On');
    assignMat('Head_Lights_B_03', 'White_On');
    assignMat('Head_Lights_Blinker', 'Orange_On');
    assignMat('Head_Lights_Blinker_Bulb', 'Orange_On');
    assignMat('Head_Lights_DRL', 'White_On');
    assignMat('Head_Lights_Fog', 'Fog_On');
  });
  
  eventHTMLElem('click', 'src4', false, function(event) {
      document.getElementById('audi').style.color = "#080f17";
      document.getElementById('src3').style.display = "inline-block";
      document.getElementById('src4').style.display = "none";
      document.getElementById('disclaimer').style.color = "#26262c";
  
    replaceTexture('Verge3D_Environment', 'environment_texture', './Day_Env_VC1.hdr', function() {});
    assignMat('Environment_Object', 'BG_Environment_Day');
    assignMat('Light Poles', 'Day BG');
    assignMat('Head_Lights_A', 'Dark_Glass_Light');
    assignMat('Head_Lights_B_Bulb', 'HeadLight_Bulb');
    assignMat('Head_Lights_B_01', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_02', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_03', 'Ex_LightsChrome');
    assignMat('Head_Lights_Blinker', 'HeadLight_Reflector');
    assignMat('Head_Lights_Blinker_Bulb', 'Orange_Bulb');
    assignMat('Head_Lights_DRL', 'HeadLight_DRL');
    assignMat('Head_Lights_Fog', 'Dark_Glass_Light');

  });
  
  eventHTMLElem('click', 'ab_4', false, function(event) {
      document.getElementById('audi').style.color = "#080f17";
      document.getElementById('ab_3').style.display = "inline-block";
      document.getElementById('ab_4').style.display = "none";
      document.getElementById('az').style.color = "#4e4e4e";
      document.getElementById('ay').style.color = "#4e4e4e";
      document.getElementById('disclaimer').style.color = "#26262c";
  
    replaceTexture('Verge3D_Environment', 'environment_texture', './Day_Env_VC1.hdr', function() {});
    assignMat('Environment_Object', 'BG_Environment_Day');
    assignMat('Light Poles', 'Day BG');
    assignMat('Head_Lights_A', 'Dark_Glass_Light');
    assignMat('Head_Lights_B_Bulb', 'HeadLight_Bulb');
    assignMat('Head_Lights_B_01', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_02', 'Ex_LightsChrome');
    assignMat('Head_Lights_B_03', 'Ex_LightsChrome');
    assignMat('Head_Lights_Blinker', 'HeadLight_Reflector');
    assignMat('Head_Lights_Blinker_Bulb', 'Orange_Bulb');
    assignMat('Head_Lights_DRL', 'HeadLight_DRL');
    assignMat('Head_Lights_Fog', 'Dark_Glass_Light');

  });


  
wheels = 'closed';

eventHTMLElem('click', 'unfold_knife_button1', false, function(event) {
    if (wheels == 'closed') {
      document.getElementById('unfold_knife_button1').style.border= '3px solid #00aad2';
  
      operateAnimation('PLAY', 'Ft_Lt_Wheel', null, null, 'LoopOnce', 1,
              function() {}, undefined, false);
  
  
      operateAnimation('PLAY', 'Ft_Rt_Wheel', null, null, 'LoopOnce', 1,
              function() {
        wheels = 'open';
      }, undefined, false);
  
          } else if (wheels == 'open') {
              document.getElementById('unfold_knife_button1').style.border= 'none';
  
      operateAnimation('PLAY', 'Ft_Lt_Wheel', null, null, 'LoopOnce', 1,
              function() {}, undefined, true);
  
  
      operateAnimation('PLAY', 'Ft_Rt_Wheel', null, null, 'LoopOnce', 1,
              function() {
        wheels = 'closed';
      }, undefined, true);
  
          }


         
   
  });

  
windows = 'closed';

mirror_r = 'closed';



eventHTMLElem('click', 'fold_knife_button', false, function(event) {
    if (windows == 'closed') {
      document.getElementById('fold_knife_button').style.border= '3px solid #00aad2';
  
      operateAnimation('PLAY', 'Ani_Door_rear_L_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, false);
  
  
      operateAnimation('PLAY', 'Ani_Door_rear_R_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, false);
  
  
      operateAnimation('PLAY', 'Ani_Door_front_L_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, false);
  
  
      operateAnimation('PLAY', 'Ani_door_front_R_window', null, null, 'LoopOnce', 1,
              function() {
        windows = 'open';
      }, undefined, false);
  
          } else if (windows == 'open') {
              document.getElementById('fold_knife_button').style.border= 'none';
  
      operateAnimation('PLAY', 'Ani_Door_rear_L_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, true);
  
  
      operateAnimation('PLAY', 'Ani_Door_rear_R_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, true);
  
  
      operateAnimation('PLAY', 'Ani_Door_front_L_window', null, null, 'LoopOnce', 1,
              function() {}, undefined, true);
  
  
      operateAnimation('PLAY', 'Ani_door_front_R_window', null, null, 'LoopOnce', 1,
              function() {
        windows = 'closed';
      }, undefined, true);
  
          }
    if (mirror_r == 'closed') {
  
      operateAnimation('PLAY', 'Ani_Lt_Mirror', null, null, 'LoopOnce', 1,
              function() {}, undefined, false);
  
  
      operateAnimation('PLAY', 'Ani_Rt_Mirror', null, null, 'LoopOnce', 1,
              function() {
        mirror_r = 'open';
      }, undefined, false);
  
          } else if (mirror_r == 'open') {
  
      operateAnimation('PLAY', 'Ani_Lt_Mirror', null, null, 'LoopOnce', 1,
              function() {}, undefined, true);
  
  
      operateAnimation('PLAY', 'Ani_Rt_Mirror', null, null, 'LoopOnce', 1,
              function() {
        mirror_r = 'closed';
      }, undefined, true);
  
          }
  
  });


  eventHTMLElem('click', 'int', false, function(event) {
    document.getElementById('1st_replace').style.display = "none";
    document.getElementById('2nd_replace').style.display = "block";
    document.getElementById('sunrrof2').style.display = "revert";
    document.getElementById('sunrrof1').style.display = "none";  
    if (fr_door == 'closed') {
    
    operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
            function() {
                fr_door = 'open';
    }, undefined, false);
    
        } else if (fr_door == 'open') {
    
    
            fr_door = 'open';
    
        }
    
    if (fl_door == 'open') {
    
            operateAnimation('PLAY', 'Front_Lt_Door', null, null, 'LoopOnce', 1,
                    function() {
                        fl_door = 'closed';
            }, undefined, true);
        
                } 
                if (br_door == 'open') {
    
                    operateAnimation('PLAY', 'Back_Rt_Door', null, null, 'LoopOnce', 1,
                            function() {
                                br_door = 'closed';
                    }, undefined, true);
                
                        } 
    
                if (bl_door == 'open') {
    
                    operateAnimation('PLAY', 'Back_Lt_Door', null, null, 'LoopOnce', 1,
                            function() {
                                bl_door = 'closed';
                    }, undefined, true);


                    if (tailgate == 'open') {

                        operateAnimation('PLAY', 'Taigate_Open', null, null, 'LoopOnce', 1,
                        function() {
                            tailgate = 'closed';
            
                }, undefined, true);
                operateAnimation('PLAY', 'Tailgate_Hydraulics_Rt', null, null, 'LoopOnce', 1,
                                function() {
                        }, undefined, true);
                        operateAnimation('PLAY', 'Tailgate_Hydraulics_Lft', null, null, 'LoopOnce', 1,
                        function() {
                        }, undefined, true);
            
                    }
            

                
} 
    tweenCamera('CamPosition_A', 'CamTarget_A', 2, function() {
    setActiveCamera('Camera_Inside');
    operateAnimation('PLAY', 'Camera_Inside', null, null, 'AUTO', 1,
            function() {
      setActiveCamera('Camera_Inside_Free');
    
    }, undefined, false);
    });
    registerSetTimeout(5, function() {
    if (fr_door == 'closed') {
    
    operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
            function() {
                fr_door = 'open';
    }, undefined, false);
    
        } else if (fr_door == 'open') {
    
    operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
            function() {
                fr_door = 'closed';
    }, undefined, true);
    
        }
    
    
    });
    });
    
    
    
    registerEveryFrame(function() {
        setObjTransform('Camera_Inside_Free', 'position', 0, 0.473, 1.157, false);
    
      });
    
    eventHTMLElem('click', 'exit', false, function(event) {
    document.getElementById('2nd_replace').style.display = "none";
    document.getElementById('1st_replace').style.display = "block";
    document.getElementById('sunrrof2').style.display = "none";
    document.getElementById('sunrrof1').style.display = "revert";
    
    if (fr_door == 'closed') {
    
    operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
            function() {
                fr_door = 'open';
    }, undefined, false);
    
        } else if (fr_door == 'open') {
    
    operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
            function() {
                fr_door = 'closed';
    }, undefined, true);
    
        }
    
    tweenCamera('Point001', 'CamTarget_A', 1.5, function() {
    setActiveCamera('Camera_IntoOut');
    
    operateAnimation('PLAY', 'Camera_IntoOut', null, null, 'LoopOnce', 1,
            function() {
      setActiveCamera('Main_360_Camera');
    
      tweenCamera('Main Cam Position', 'Main Cam Target', 2, function() {});
    }, undefined, false);
    
        });
    registerSetTimeout(3, function() {
    if (fr_door == 'closed') {
    
      operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
              function() {
                fr_door = 'open';
      }, undefined, false);
    
          } else if (fr_door == 'open') {
    
      operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
              function() {
                fr_door = 'closed';
      }, undefined, true);
    
          }
         
    });
    }, function() {});
    
    
    
    //Mobile Version....
    
    eventHTMLElem('click', 'int_mobile', false, function(event) {
        document.getElementById('int_mobile').style.display = "none";
        document.getElementById('exit_mobile').style.display = "block";
        document.getElementById('sunrrof2').style.display = "revert";
        document.getElementById('sunrrof1').style.display = "none";
        if (fr_door == 'closed') {
        
        operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                function() {
                    fr_door = 'open';
        }, undefined, false);
        
            } else if (fr_door == 'open') {
        
        
                fr_door = 'open';
        
            }
        
        if (fl_door == 'open') {
        
                operateAnimation('PLAY', 'Front_Lt_Door', null, null, 'LoopOnce', 1,
                        function() {
                            fl_door = 'closed';
                }, undefined, true);
            
                    } 
                    if (br_door == 'open') {
        
                        operateAnimation('PLAY', 'Back_Rt_Door', null, null, 'LoopOnce', 1,
                                function() {
                                    br_door = 'closed';
                        }, undefined, true);
                    
                            } 
        
                    if (bl_door == 'open') {
        
                        operateAnimation('PLAY', 'Back_Lt_Door', null, null, 'LoopOnce', 1,
                                function() {
                                    bl_door = 'closed';
                        }, undefined, true);
                    
                            } 
                            if (tailgate == 'open') {

                                operateAnimation('PLAY', 'Taigate_Open', null, null, 'LoopOnce', 1,
            function() {
                tailgate = 'closed';

    }, undefined, true);
    operateAnimation('PLAY', 'Tailgate_Hydraulics_Rt', null, null, 'LoopOnce', 1,
                    function() {
            }, undefined, true);
            operateAnimation('PLAY', 'Tailgate_Hydraulics_Lft', null, null, 'LoopOnce', 1,
            function() {
            }, undefined, true);

        }

          
        
        
        tweenCamera('CamPosition_A', 'CamTarget_A', 2, function() {
        setActiveCamera('Camera_Inside');
        operateAnimation('PLAY', 'Camera_Inside', null, null, 'AUTO', 1,
                function() {
          setActiveCamera('Camera_Inside_Free');
        
        }, undefined, false);
        });
        registerSetTimeout(5, function() {
        if (fr_door == 'closed') {
        
        operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                function() {
                    fr_door = 'open';
        }, undefined, false);
        
            } else if (fr_door == 'open') {
        
        operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                function() {
                    fr_door = 'closed';
        }, undefined, true);
        
            }
        
        
        });
        });
        
        
        
        registerEveryFrame(function() {
            setObjTransform('Camera_Inside_Free', 'position', 0, 0.473, 1.157, false);
        
          });
        
        eventHTMLElem('click', 'exit_mobile', false, function(event) {
        document.getElementById('exit_mobile').style.display = "none";
        document.getElementById('int_mobile').style.display = "block";
        document.getElementById('sunrrof2').style.display = "none";
        document.getElementById('sunrrof1').style.display = "revert";
        if (fr_door == 'closed') {
        
        operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                function() {
                    fr_door = 'open';
        }, undefined, false);
        
            } else if (fr_door == 'open') {
        
        operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                function() {
                    fr_door = 'closed';
        }, undefined, true);
        
            }
        
        tweenCamera('Point001', 'CamTarget_A', 1.5, function() {
        setActiveCamera('Camera_IntoOut');
        
        operateAnimation('PLAY', 'Camera_IntoOut', null, null, 'LoopOnce', 1,
                function() {
          setActiveCamera('Main_360_Camera');
        
          tweenCamera('Main Cam Position', 'Main Cam Target', 2, function() {});
        }, undefined, false);
        
            });
        registerSetTimeout(3, function() {
        if (fr_door == 'closed') {
        
          operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                  function() {
                    fr_door = 'open';
          }, undefined, false);
        
              } else if (fr_door == 'open') {
        
          operateAnimation('PLAY', 'Front_Rt_Door', null, null, 'LoopOnce', 1,
                  function() {
                    fr_door = 'closed';
          }, undefined, true);
        
              }
             
        });
        }, function() {});
    
 
operateAnimation('STOP', 'Sunroof_Sunshade_Open', null, null, 'AUTO', 1,
function() {}, undefined, false);


operateAnimation('STOP', 'Sunroof_Glass_Open', null, null, 'AUTO', 1,
function() {}, undefined, false);

operateAnimation('STOP', 'Sunroof_Support', null, null, 'AUTO', 1,
function() {}, undefined, false);

sunroof = 'closed';

sunroof1 = 'closed';

      
eventHTMLElem('click', 'sunrrof1', false, function(event) {
    if (sunroof1 == 'closed')
    {
        sunroof1 = 'open';
    
        document.getElementById('sunrrof1').style.cursor = "not-allowed";
    
    
        operateAnimation('PLAY', 'Sunroof_Sunshade_Open', null, null, 'LoopOnce', 1,
        function() {
    
            operateAnimation('PLAY', 'Sunroof_Glass_Open', null, null, 'LoopOnce', 1,
            function() {
    
    
            document.getElementById('sunrrof1').style.cursor = "pointer";
    
        
            }, undefined, false);
    
        }, undefined, false);
    
    
          
    
    
    
    
        
    
        document.getElementById('sunrrof1').style.border = "3px solid #00aad2";
    
        }  else   if (sunroof1 == 'open') {
            sunroof1 = 'closed';
    
    
       
       
        operateAnimation('PLAY', 'Sunroof_Glass_Open', null, null, 'LoopOnce', 1,
        function() {
    
            operateAnimation('PLAY', 'Sunroof_Sunshade_Open', null, null, 'LoopOnce', 1,
            function() {
        
            }, undefined, true);
    
        }, undefined, true);
        document.getElementById('sunrrof1').style.border = "none";
    
        }
    
    });
    
    
    
    
    eventHTMLElem('click', 'sunrrof2', false, function(event) {
        if (sunroof1 == 'closed')
        {
            sunroof1 = 'open';
            document.getElementById('sunrrof2').style.cursor = "not-allowed";
    
    
    
    tweenCamera('Camera_Ft_Sunroof_Position', 'Camera_Ft_Sunroof.Target', 2, function() {
    setActiveCamera('Camera_Ft_Sunroof');
    
    operateAnimation('PLAY', 'Sunroof_Sunshade_Open', null, null, 'LoopOnce', 1,
    function() {
    
        operateAnimation('PLAY', 'Sunroof_Glass_Open', null, null, 'LoopOnce', 1,
        function() {
        document.getElementById('sunrrof2').style.cursor = "pointer";
        }, undefined, false);
    
    
    }, undefined, false);
               
           
    
    });
    
            
            document.getElementById('sunrrof2').style.border = "3px solid #00aad2";
            }  else   if (sunroof1 == 'open') {
        sunroof1 = 'closed';
    
      
    
    
        operateAnimation('PLAY', 'Sunroof_Glass_Open', null, null, 'LoopOnce', 1,
        function() {
    
    
            operateAnimation('PLAY', 'Sunroof_Sunshade_Open', null, null, 'LoopOnce', 1,
            function() {
        
        
                setActiveCamera('Camera_Inside_Free');
                tweenCamera('Camera_Inside', 'Camera_Inside_Free', 2, function() {});
                setActiveCamera('Camera_Inside_Free');
    
          
            }, undefined, true);
        
        }, undefined, true);
           
    document.getElementById('sunrrof2').style.border = "none";
        }
    });
    
    
     
eventHTMLElem('click', 'red', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color',0.404, 0, 0, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.867, 0.239, 0.263, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color', 0.404, 0, 0., '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color', 0.867, 0.239, 0.263, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 0.6);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);

    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.404, 0.404, 0.404, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.973, 0.973, 0.973, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.23);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.9);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'block', 'red1', false);
    setHTMLElemStyle('display', 'none', 'redb1', false);
    setHTMLElemStyle('display', 'none', 'orange1', false);
    setHTMLElemStyle('display', 'none', 'blue1', false);
    setHTMLElemStyle('display', 'none', 'white1', false);


    setHTMLElemStyle('display', 'block', 'white', false);
    setHTMLElemStyle('display', 'block', 'blue', false);
    setHTMLElemStyle('display', 'block', 'orange', false);
    setHTMLElemStyle('display', 'none', 'red', false);
    setHTMLElemStyle('display', 'block', 'redb', false);

    setHTMLElemStyle('display', 'block', 'grey', false);
    setHTMLElemStyle('display', 'none', 'grey1', false);
  });

  eventHTMLElem('click', 'redb', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color',0.404, 0, 0, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.867, 0.239, 0.263, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color', 0.006, 0.006, 0.007, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color',  0.384,  0.384, 0.412, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 1);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);

    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.404, 0.404, 0.404, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.973, 0.973, 0.973, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.23);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.9);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'none', 'red1', false);
    setHTMLElemStyle('display', 'block', 'redb1', false);
    setHTMLElemStyle('display', 'none', 'orange1', false);
    setHTMLElemStyle('display', 'none', 'blue1', false);
    setHTMLElemStyle('display', 'none', 'white1', false);


    setHTMLElemStyle('display', 'block', 'white', false);
    setHTMLElemStyle('display', 'block', 'blue', false);
    setHTMLElemStyle('display', 'block', 'orange', false);
    setHTMLElemStyle('display', 'block', 'red', false);
    setHTMLElemStyle('display', 'none', 'redb', false);
    setHTMLElemStyle('display', 'block', 'grey', false);
    setHTMLElemStyle('display', 'none', 'grey1', false);
  });


  eventHTMLElem('click', 'orange', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color', 0, 0.004, 0.191, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.996, 0.996, 0.996, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color', 0.006, 0.006, 0.007, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color', 0.384, 0.384, 0.412, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 1);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);


    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.89, 0.004, 0, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.996, 0.365, 0.365, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.36);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.7);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'none', 'red1', false);
    setHTMLElemStyle('display', 'none', 'redb1', false);
    setHTMLElemStyle('display', 'block', 'orange1', false);
    setHTMLElemStyle('display', 'none', 'blue1', false);
    setHTMLElemStyle('display', 'none', 'white1', false);


    setHTMLElemStyle('display', 'block', 'white', false);
    setHTMLElemStyle('display', 'block', 'blue', false);
    setHTMLElemStyle('display', 'none', 'orange', false);
    setHTMLElemStyle('display', 'block', 'red', false);
    setHTMLElemStyle('display', 'block', 'redb', false);
    setHTMLElemStyle('display', 'block', 'grey', false);
    setHTMLElemStyle('display', 'none', 'grey1', false);
  
  });

  eventHTMLElem('click', 'blue', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color', 0, 0.004, 0.191, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.996, 0.996, 0.996, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color', 0, 0.004, 0.191, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color',  0.996, 0.996, 0.996, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 0.6);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);


    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.89, 0.004, 0, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.996, 0.365, 0.365, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.36);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.7);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'none', 'red1', false);
    setHTMLElemStyle('display', 'none', 'redb1', false);
    setHTMLElemStyle('display', 'none', 'orange1', false);
    setHTMLElemStyle('display', 'block', 'blue1', false);
    setHTMLElemStyle('display', 'none', 'white1', false);


    setHTMLElemStyle('display', 'block', 'white', false);
    setHTMLElemStyle('display', 'none', 'blue', false);
    setHTMLElemStyle('display', 'block', 'orange', false);
    setHTMLElemStyle('display', 'block', 'red', false);
    setHTMLElemStyle('display', 'block', 'redb', false);
    setHTMLElemStyle('display', 'block', 'grey', false);
    setHTMLElemStyle('display', 'none', 'grey1', false);
  
  });

  eventHTMLElem('click', 'white', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color', 0.459, 0.459, 0.459, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.76);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.3);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.16);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color', 0.93, 0.93, 0.93, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color',  0.459, 0.459, 0.459, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color',   0.93, 0.93, 0.93, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.76);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 0.3);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.16);


    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.89, 0.004, 0, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.996, 0.365, 0.365, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.36);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.7);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'none', 'red1', false);
    setHTMLElemStyle('display', 'none', 'redb1', false);
    setHTMLElemStyle('display', 'none', 'orange1', false);
    setHTMLElemStyle('display', 'none', 'blue1', false);
    setHTMLElemStyle('display', 'block', 'white1', false);


    setHTMLElemStyle('display', 'none', 'white', false);
    setHTMLElemStyle('display', 'block', 'blue', false);
    setHTMLElemStyle('display', 'block', 'orange', false);
    setHTMLElemStyle('display', 'block', 'red', false);
    setHTMLElemStyle('display', 'block', 'redb', false);

    setHTMLElemStyle('display', 'block', 'grey', false);
    setHTMLElemStyle('display', 'none', 'grey1', false);
  
  
  });

  eventHTMLElem('click', 'grey', false, function(event) {
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Base_Color', 0.031, 0.035, 0.035, '');
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Roughness', 0.36);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Metalness', 0.6);
    setMaterialValue('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Coating_Roughness', 0.26);
    setMaterialColor('CarPaint_MainBody_Mix', 'CarPaint_MainBody_Reflection_Color',0.576, 0.617, 0.647, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Base_Color',  0.031, 0.035, 0.035, '');
    setMaterialColor('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Reflection_Color',   0.576, 0.617, 0.647, '');
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Roughness', 0.36);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Metalness', 0.6);
    setMaterialValue('CarPaint_UpperBody_Mix', 'CarPaint_UpperBody_Coating_Roughness', 0.26);


    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Base_Color', 0.89, 0.004, 0, '');
    setMaterialColor('N-Line_Mix', 'CarPaint_Line_Reflection_Color', 0.996, 0.365, 0.365, '');
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Roughness', 0.36);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Metalness', 0.7);
    setMaterialValue('N-Line_Mix', 'CarPaint_Line_Coating_Roughness', 0.26);
  
    setHTMLElemStyle('display', 'none', 'red1', false);
    setHTMLElemStyle('display', 'none', 'redb1', false);
    setHTMLElemStyle('display', 'none', 'orange1', false);
    setHTMLElemStyle('display', 'none', 'blue1', false);
    setHTMLElemStyle('display', 'none', 'white1', false);
    setHTMLElemStyle('display', 'block', 'grey1', false);
    setHTMLElemStyle('display', 'none', 'grey', false);

    setHTMLElemStyle('display', 'block', 'white', false);
    setHTMLElemStyle('display', 'block', 'blue', false);
    setHTMLElemStyle('display', 'block', 'orange', false);
    setHTMLElemStyle('display', 'block', 'red', false);
    setHTMLElemStyle('display', 'block', 'redb', false);


  
  
  });



handleAnnot(true, '1', 'HS_1_Ext_01_Chequered flag ', '', 'exterior/Chequered flag inspired front grille.jpg');
handleAnnot(true, '2', 'HS_1_Ext_02_LED projector with LED', '', 'exterior/LED projector with LED daytime running lamps (DRL).jpg');
handleAnnot(true, '3', 'HS_1_Ext_03_Front projector fog lamps', '', 'exterior/Front projector fog lamps.jpg');
handleAnnot(true, '4', 'HS_1_Ext_04_N Line exclusive front bumper', '', 'exterior/N Line exclusive front bumper.jpg');
handleAnnot(true, '5', 'HS_1_Ext_05_Front skid plate with athletic red', '', 'exterior/Front skid plate with athletic red highlights.jpg');
handleAnnot(true, '6', 'HS_1_Ext_06_Side sill garnish', '', 'exterior/Side sill garnish with athletic red insert on.jpg');
handleAnnot(true, '7', 'HS_1_Ext_07_Front disc brakes with red calliper', '', 'exterior/Front disc brakes with red calliper.jpg');
handleAnnot(true, '8', 'HS_1_Ext_08_Puddle lamps', '', 'exterior/Puddle lamps with welcome function.jpg');
// handleAnnot(true, '9', 'HS_1_Ext_09_R16 diamond cut alloy', '', 'poi9');
handleAnnot(true, '10', 'HS_1_Ext_10_N Line emblem on Side fenders', '', 'exterior/N Line emblem on Side fenders (left & right).jpg');
handleAnnot(true, '11', 'HS_1_Ext_11_Black beltline', '', 'exterior/Black beltline.jpg');
handleAnnot(true, '12', 'HS_1_Ext_12_High gloss painted black ORVM', '', 'exterior/High gloss painted black finish Outside rear view mirror.jpg');
handleAnnot(true, '13', 'HS_1_Ext_13_Sporty tailgate spoiler ', '', 'exterior/Sporty tailgate spoiler with side wings.jpg');
handleAnnot(true, '14', 'HS_1_Ext_14_Twin tip muffler', '', 'exterior/Twin tip muffler.jpg');
handleAnnot(true, '15', 'HS_1_Ext_15_Z-shaped LED tail lamps', '', 'exterior/Z-shaped LED tail lamps.jpg');
handleAnnot(true, '16', 'HS_1_Ext_16_Dark chrome connecting tail ', '', 'exterior/Dark chrome connecting tail lamp garnish.jpg');

handleAnnot(true, '17', 'HS_2_Int_01_Sporty black interiors with athletic red', '', 'interior/Sporty black interiors with athletic red inserts.jpg');
handleAnnot(true, '18', 'HS_2_Int_02_Chequered flag design leather seats', '', 'interior/Chequered flag design leather seats with N logo.jpg');
handleAnnot(true, '19', 'HS_2_Int_03_Perforated leather Wrapped gear knob', '', 'interior/Perforated leather Wrapped gear knob with N logo.jpg');
handleAnnot(true, '20', 'HS_2_Int_04_HD touchscreen', '', 'interior/26.03 cm (10.25_) HD touchscreen infotainment & navigation system.jpg');
handleAnnot(true, '21', 'HS_2_Int_05_Digital cluster with TFT MID', '', 'interior/Digital cluster with TFT multi information display (MID).jpg');
handleAnnot(true, '22', 'HS_2_Int_06_Exciting red ambient lights', '', 'interior/Exciting red ambient lights.jpg');
// handleAnnot(true, '23', 'HS_2_Int_07_Voice enabled smart electric sunroof', '', 'interior/Voice enabled smart electric sunroof.jpg');
handleAnnot(true, '24', 'HS_3_Sft_01_Airbags', '', 'safety/Airbags (Driver & passenger.jpg');
handleAnnot(true, '25', 'HS_3_Sft_02_Electronic stability control (ESC)', '', 'safety/Tyre pressure monitoring system (Highline).jpg');

handleAnnot(true, '26', 'HS_3_Sft_03_Hill assist control (HAC)', '', 'safety/Hill assist control (HAC).jpg');

handleAnnot(true, '27', 'HS_3_Sft_04_Tyre pressure monitoring system', '', 'safety/Tyre pressure monitoring system (Highline).jpg');

handleAnnot(true, '28', 'HS_3_Sft_05_Rear disc brakes', '', 'safety/reardiskbreaks.jpg');

handleAnnot(true, '29', 'HS_3_Sft_06_ISOFIX', '', 'safety/ISOFIX.jpg');

handleAnnot(true, '30', 'HS_3_Sft_07_Blue vlink buttons', '', 'safety/Blue vlink buttons (SOS).jpg');

handleAnnot(true, '31', 'HS_4_Comf_01_Bose premium 7 speaker system', '', 'convenience/Bose premium 7 speaker system.jpg');

handleAnnot(true, '32', 'HS_2_Int_07_Voice enabled smart electric sunroof', '', 'interior/Voice enabled smart electric sunroof.jpg');

handleAnnot(true, '33', 'HS_4_Comf_03_Paddle shifters', '', 'convenience/Paddle shifters (DCT only).jpg');

handleAnnot(true, '34', 'HS_4_Comf_04_Wireless charger with cooling pad', '', 'convenience/Wireless charger with cooling pad.jpg');

handleAnnot(true, '35', 'HS_4_Comf_05_Cruise control', '', 'convenience/Cruise control.jpg');

handleAnnot(true, '36', 'HS_4_Comf_06_Rear AC vents', '', 'convenience/rearac.jpg');

handleAnnot(true, '37', 'HS_4_Comf_07_Glove box cooling', '', 'convenience/Glove box cooling.jpg');

handleAnnot(true, '38', 'HS_4_Comf_08_Tilt & telescopic steering', '', 'convenience/Tilt & telescopic steering.jpg');

handleAnnot(true, '39', 'HS_4_Comf_09_Rear USB charger', '', 'convenience/Rear USB charger.jpg');

handleAnnot(true, '40', 'HS_5_Perf_01_1.0 Turbo GDi petrol', '', 'performance/1.0 Turbo GDi petrol.jpg');

handleAnnot(true, '41', 'HS_5_Perf_02,03_Dual Clutch / Intelligent Manual -  Transmission', '', 'performance/Intelligent manual transmission (iMT).jpg');




 


} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
